

Microchip MPLAB XC8 Assembler V2.10 build -13193770 
                                                                                               Tue Mar  3 10:15:40 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190628064726 Og1 
     1                           	processor	18F1220
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    10                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    11  0000                     
    12                           ; Version 2.10
    13                           ; Generated 28/06/2019 GMT
    14                           ; 
    15                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    16                           ; All rights reserved.
    17                           ; 
    18                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    19                           ; 
    20                           ; Redistribution and use in source and binary forms, with or without modification, are
    21                           ; permitted provided that the following conditions are met:
    22                           ; 
    23                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    24                           ;        conditions and the following disclaimer.
    25                           ; 
    26                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    27                           ;        of conditions and the following disclaimer in the documentation and/or other
    28                           ;        materials provided with the distribution.
    29                           ; 
    30                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    31                           ;        software without specific prior written permission.
    32                           ; 
    33                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    34                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    35                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    36                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    37                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    38                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    39                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    40                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    41                           ; 
    42                           ; 
    43                           ; Code-generator required, PIC18F1220 Definitions
    44                           ; 
    45                           ; SFR Addresses
    46  0000                     
    47                           ; #config settings
    48                           
    49                           	psect	cinit
    50  000FB0                     __pcinit:
    51                           	opt callstack 0
    52  000FB0                     start_initialization:
    53                           	opt callstack 0
    54  000FB0                     __initialization:
    55                           	opt callstack 0
    56  000FB0                     end_of_initialization:
    57                           	opt callstack 0
    58  000FB0                     __end_of__initialization:
    59                           	opt callstack 0
    60  000FB0  0100               	movlb	0
    61  000FB2  EFE6  F007         	goto	_main	;jump to C main() function
    62                           
    63                           	psect	cstackCOMRAM
    64  000001                     __pcstackCOMRAM:
    65                           	opt callstack 0
    66  000001                     ?_add:
    67                           	opt callstack 0
    68  000001                     add@a:
    69                           	opt callstack 0
    70                           
    71                           ; 2 bytes @ 0x0
    72  000001                     	ds	2
    73  000003                     add@b:
    74                           	opt callstack 0
    75                           
    76                           ; 2 bytes @ 0x2
    77  000003                     	ds	2
    78  000005                     add@m:
    79                           	opt callstack 0
    80                           
    81                           ; 2 bytes @ 0x4
    82  000005                     	ds	2
    83  000007                     
    84                           ; 1 bytes @ 0x6
    85  000007                     	ds	2
    86  000009                     main@d:
    87                           	opt callstack 0
    88                           
    89                           ; 2 bytes @ 0x8
    90  000009                     	ds	2
    91  00000B                     main@e:
    92                           	opt callstack 0
    93                           
    94                           ; 2 bytes @ 0xA
    95  00000B                     	ds	2
    96                           
    97 ;;
    98 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
    99 ;;
   100 ;; *************** function _main *****************
   101 ;; Defined at:
   102 ;;		line 4 in file "SourceFiles/newmain.c"
   103 ;; Parameters:    Size  Location     Type
   104 ;;		None
   105 ;; Auto vars:     Size  Location     Type
   106 ;;  e               2   10[COMRAM] int 
   107 ;;  d               2    8[COMRAM] int 
   108 ;;  c               2    0        int 
   109 ;; Return value:  Size  Location     Type
   110 ;;                  1    wreg      void 
   111 ;; Registers used:
   112 ;;		wreg, status,2, status,0, cstack
   113 ;; Tracked objects:
   114 ;;		On entry : 0/0
   115 ;;		On exit  : 0/0
   116 ;;		Unchanged: 0/0
   117 ;; Data sizes:     COMRAM   BANK0
   118 ;;      Params:         0       0
   119 ;;      Locals:         6       0
   120 ;;      Temps:          0       0
   121 ;;      Totals:         6       0
   122 ;;Total ram usage:        6 bytes
   123 ;; Hardware stack levels required when called:    1
   124 ;; This function calls:
   125 ;;		_add
   126 ;; This function is called by:
   127 ;;		Startup code after reset
   128 ;; This function uses a non-reentrant model
   129 ;;
   130                           
   131                           	psect	text0
   132  000FCC                     __ptext0:
   133                           	opt callstack 0
   134  000FCC                     _main:
   135                           	opt callstack 30
   136  000FCC                     
   137                           ;SourceFiles/newmain.c: 6:     int d = 15;
   138  000FCC  0E00               	movlw	0
   139  000FCE  6E0A               	movwf	(main@d+1)^0,c
   140  000FD0  0E0F               	movlw	15
   141  000FD2  6E09               	movwf	main@d^0,c
   142  000FD4                     
   143                           ;SourceFiles/newmain.c: 7:     int e = add(c,d);
   144  000FD4  0E00               	movlw	0
   145  000FD6  6E02               	movwf	(add@a+1)^0,c
   146  000FD8  0E07               	movlw	7
   147  000FDA  6E01               	movwf	add@a^0,c
   148  000FDC  0E00               	movlw	0
   149  000FDE  6E04               	movwf	(add@b+1)^0,c
   150  000FE0  0E0F               	movlw	15
   151  000FE2  6E03               	movwf	add@b^0,c
   152  000FE4  ECDB  F007         	call	_add	;wreg free
   153  000FE8  C001  F00B         	movff	?_add,main@e
   154  000FEC  C002  F00C         	movff	?_add+1,main@e+1
   155  000FF0                     
   156                           ;SourceFiles/newmain.c: 8:     e = e + 2;
   157  000FF0  0E02               	movlw	2
   158  000FF2  240B               	addwf	main@e^0,w,c
   159  000FF4  6E0B               	movwf	main@e^0,c
   160  000FF6  0E00               	movlw	0
   161  000FF8  200C               	addwfc	(main@e+1)^0,w,c
   162  000FFA  6E0C               	movwf	(main@e+1)^0,c
   163  000FFC  EF01  F000         	goto	start
   164  001000                     __end_of_main:
   165                           	opt callstack 0
   166                           
   167 ;; *************** function _add *****************
   168 ;; Defined at:
   169 ;;		line 12 in file "SourceFiles/newmain.c"
   170 ;; Parameters:    Size  Location     Type
   171 ;;  a               2    0[COMRAM] int 
   172 ;;  b               2    2[COMRAM] int 
   173 ;; Auto vars:     Size  Location     Type
   174 ;;  m               2    4[COMRAM] int 
   175 ;; Return value:  Size  Location     Type
   176 ;;                  2    0[COMRAM] int 
   177 ;; Registers used:
   178 ;;		wreg, status,2, status,0
   179 ;; Tracked objects:
   180 ;;		On entry : 0/0
   181 ;;		On exit  : 0/0
   182 ;;		Unchanged: 0/0
   183 ;; Data sizes:     COMRAM   BANK0
   184 ;;      Params:         4       0
   185 ;;      Locals:         2       0
   186 ;;      Temps:          0       0
   187 ;;      Totals:         6       0
   188 ;;Total ram usage:        6 bytes
   189 ;; Hardware stack levels used:    1
   190 ;; This function calls:
   191 ;;		Nothing
   192 ;; This function is called by:
   193 ;;		_main
   194 ;; This function uses a non-reentrant model
   195 ;;
   196                           
   197                           	psect	text1
   198  000FB6                     __ptext1:
   199                           	opt callstack 0
   200  000FB6                     _add:
   201                           	opt callstack 30
   202  000FB6                     
   203                           ;SourceFiles/newmain.c: 13:     int m = a + b;
   204  000FB6  5003               	movf	add@b^0,w,c
   205  000FB8  2401               	addwf	add@a^0,w,c
   206  000FBA  6E05               	movwf	add@m^0,c
   207  000FBC  5004               	movf	(add@b+1)^0,w,c
   208  000FBE  2002               	addwfc	(add@a+1)^0,w,c
   209  000FC0  6E06               	movwf	(add@m+1)^0,c
   210  000FC2                     
   211                           ;SourceFiles/newmain.c: 14:     return m;
   212  000FC2  C005  F001         	movff	add@m,?_add
   213  000FC6  C006  F002         	movff	add@m+1,?_add+1
   214  000FCA  0012               	return		;funcret
   215  000FCC                     __end_of_add:
   216                           	opt callstack 0
   217  0000                     
   218                           	psect	rparam
   219  0000                     tosu	equ	0xFFF
   220                           tosh	equ	0xFFE
   221                           tosl	equ	0xFFD
   222                           stkptr	equ	0xFFC
   223                           pclatu	equ	0xFFB
   224                           pclath	equ	0xFFA
   225                           pcl	equ	0xFF9
   226                           tblptru	equ	0xFF8
   227                           tblptrh	equ	0xFF7
   228                           tblptrl	equ	0xFF6
   229                           tablat	equ	0xFF5
   230                           prodh	equ	0xFF4
   231                           prodl	equ	0xFF3
   232                           indf0	equ	0xFEF
   233                           postinc0	equ	0xFEE
   234                           postdec0	equ	0xFED
   235                           preinc0	equ	0xFEC
   236                           plusw0	equ	0xFEB
   237                           fsr0h	equ	0xFEA
   238                           fsr0l	equ	0xFE9
   239                           wreg	equ	0xFE8
   240                           indf1	equ	0xFE7
   241                           postinc1	equ	0xFE6
   242                           postdec1	equ	0xFE5
   243                           preinc1	equ	0xFE4
   244                           plusw1	equ	0xFE3
   245                           fsr1h	equ	0xFE2
   246                           fsr1l	equ	0xFE1
   247                           bsr	equ	0xFE0
   248                           indf2	equ	0xFDF
   249                           postinc2	equ	0xFDE
   250                           postdec2	equ	0xFDD
   251                           preinc2	equ	0xFDC
   252                           plusw2	equ	0xFDB
   253                           fsr2h	equ	0xFDA
   254                           fsr2l	equ	0xFD9
   255                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     12      12
    BANK0           128      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_add

Critical Paths under _main in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0     289
                                              6 COMRAM     6     6      0
                                _add
 ---------------------------------------------------------------------------------
 (1) _add                                                  6     2      4     219
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _add

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F      C       C       1        9.4%
STACK                0      0       0       2        0.0%
BITBANK0            80      0       0       3        0.0%
BANK0               80      0       0       4        0.0%
ABS                  0      0       0       5        0.0%
BIGRAM              FF      0       0       6        0.0%
DATA                 0      0       0       7        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build -13193770 
Symbol Table                                                                                   Tue Mar  3 10:15:40 2020

                      l7 0FFC                       l10 0FCA                      l700 0FB6  
                    l702 0FC2                      l710 0FF0                      l706 0FCC  
                    l708 0FD4                      _add 0FB6                     ?_add 0001  
                   add@a 0001                     add@b 0003                     add@m 0005  
                   _main 0FCC                     start 0002             ___param_bank 000000  
                  ??_add 0005                    ?_main 0001                    main@d 0009  
                  main@e 000B          __initialization 0FB0             __end_of_main 1000  
                 ??_main 0007            __activetblptr 000000               __accesstop 0080  
__end_of__initialization 0FB0            ___rparam_used 000001           __pcstackCOMRAM 0001  
                __Hparam 0000                  __Lparam 0000                  __pcinit 0FB0  
                __ramtop 0100                  __ptext0 0FCC                  __ptext1 0FB6  
           __size_of_add 0016     end_of_initialization 0FB0      start_initialization 0FB0  
            __end_of_add 0FCC                 __Hrparam 0000                 __Lrparam 0000  
          __size_of_main 0034  
